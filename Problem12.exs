# The sequence of triangle numbers is generated by adding
# the natural numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over
# five divisors.

# What is the value of the first triangle number to have over
# five hundred divisors?

defmodule Triangular do
  def nth(n) do
    div(n * (n + 1), 2)
  end

  def factors(n) do
    sqrtN = trunc(:math.sqrt(n))
    Enum.reduce(2..sqrtN, [1, n], fn(x, acc) ->
      if (rem(n, x) === 0) do
        acc ++ [x, div(n, x)]
      else
        acc
      end
    end)
  end

  def numOverNDivisors(n) do
    numOverNDivisors(1, n)
  end

  defp numOverNDivisors(count, n) do
    triNum = nth(count)
    if (Enum.count(factors(triNum)) > n) do
      triNum
    else
      numOverNDivisors(count + 1, n)
    end
  end
end

# IO.puts Triangular.numOverNDivisors(5)
IO.puts Triangular.numOverNDivisors(500)
